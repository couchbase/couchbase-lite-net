c4stream_read
        public static ulong c4stream_read(C4ReadStream *stream, byte[] buffer, int count, C4Error *outError)
        {
            return NativeRaw.c4stream_read(stream, buffer, (UIntPtr)count, outError).ToUInt64();
        }


c4stream_write
        public static bool c4stream_write(C4WriteStream* stream, byte[] bytes, ulong length, C4Error* outError)
        {
            return NativeRaw.c4stream_write(stream, bytes, (UIntPtr)length, outError);
        }


c4doc_put
        public static C4Document* c4doc_put(C4Database *database, C4DocPutRequest *request, ulong* outCommonAncestorIndex, C4Error *outError)
        {
            var uintptr = new UIntPtr();
            var retVal = NativeRaw.c4doc_put(database, request, &uintptr, outError);
            if(outCommonAncestorIndex != null) {
                *outCommonAncestorIndex = uintptr.ToUInt64();
            }

            return retVal;
        }


FLDictKey_Init
        // Note: Allocates unmanaged heap memory; should only be used with constants
        public static FLDictKey FLDictKey_Init(string str)
        {
            return NativeRaw.FLDictKey_Init(FLSlice.Constant(str));
        }

FLJSON5_ToJSON
        public static string FLJSON5_ToJSON(string json5, FLSlice* outErrorMessage, UIntPtr* outErrPos, FLError* err)
        {
            using(var json5_ = new C4String(json5)) {
                using(var retVal = NativeRaw.FLJSON5_ToJSON((FLSlice)json5_.AsFLSlice(), outErrorMessage, outErrPos, err)) {
                    return ((FLSlice)retVal).CreateString();
                }
            }
        }
