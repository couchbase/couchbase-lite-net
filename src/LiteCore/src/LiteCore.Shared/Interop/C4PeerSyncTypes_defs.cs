//
// C4PeerSyncTypes_defs.cs
//
// Copyright (c) 2025 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// --------------------------------------------------
// <auto-generated>
// This file was generated by generate_bindings.ps1
// </auto-generated>
// --------------------------------------------------

#nullable enable
#pragma warning disable IDE0051 // Remove unused private members
#pragma warning disable IDE0044 // Add readonly modifier
#pragma warning disable CS0649  // Member never assigned to
#pragma warning disable CS0169  // Member never used


using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;

using LiteCore.Util;

namespace LiteCore.Interop
{


	internal unsafe struct C4PeerID
    {
        public fixed byte bytes[32];
    }

	internal unsafe struct C4PeerSyncCallbacks
    {
        public C4PeerSync_StatusCallback syncStatus;
        public C4PeerSync_AuthenticatorCallback authenticator;
        public C4PeerSync_DiscoveryCallback onPeerDiscovery;
        public C4PeerSync_ReplicatorCallback onReplicatorStatusChanged;
        public C4PeerSync_DocsCallback onDocumentsEnded;
        public C4PeerSync_BlobCallback onBlobProgress;
        public C4ReplicatorPropertyEncryptionCallback propertyEncryptor;
        public C4ReplicatorPropertyDecryptionCallback propertyDecryptor;
        public void* context;
    }

	internal unsafe struct C4PeerSyncCollection
    {
        public C4CollectionSpec collection;
        private byte _pushEnabled;
        private byte _pullEnabled;
        public FLSlice optionsDictFleece;
        public C4PeerSync_ValidationFunction pushFilter;
        public C4PeerSync_ValidationFunction pullFilter;
        public void* callbackContext;

        public bool pushEnabled
        {
            get
            {
                return Convert.ToBoolean(_pushEnabled);
            }
            set
            {
                _pushEnabled = Convert.ToByte(value);
            }
        }

        public bool pullEnabled
        {
            get
            {
                return Convert.ToBoolean(_pullEnabled);
            }
            set
            {
                _pullEnabled = Convert.ToByte(value);
            }
        }
    }

	internal unsafe struct C4PeerSyncParameters
    {
        public FLSlice peerGroupID;
        public FLSlice protocols;
        private UIntPtr _protocolsCount;
        public C4Cert* tlsCert;
        public C4KeyPair* tlsKeyPair;
        public C4Database* database;
        public C4PeerSyncCollection* collections;
        private UIntPtr _collectionCount;
        public FLSlice optionsDictFleece;
        public C4ReplicatorProgressLevel progressLevel;
        public C4PeerSyncCallbacks callbacks;

        public ulong protocolsCount
        {
            get {
                return _protocolsCount.ToUInt64();
            }
            set {
                _protocolsCount = (UIntPtr)value;
            }
        }

        public ulong collectionCount
        {
            get {
                return _collectionCount.ToUInt64();
            }
            set {
                _collectionCount = (UIntPtr)value;
            }
        }
    }

	internal unsafe struct C4PeerInfo
    {
        public C4Cert* certificate;
        public C4PeerID* neighbors;
        private UIntPtr _neighborCount;
        public C4ReplicatorStatus replicatorStatus;
        private byte _online;

        public ulong neighborCount
        {
            get {
                return _neighborCount.ToUInt64();
            }
            set {
                _neighborCount = (UIntPtr)value;
            }
        }

        public bool online
        {
            get {
                return Convert.ToBoolean(_online);
            }
            set {
                _online = Convert.ToByte(value);
            }
        }
    }
}

#pragma warning restore IDE0051 // Remove unused private members
#pragma warning restore IDE0044 // Add readonly modifier
#pragma warning restore CS0649  // Member never assigned to
#pragma warning restore CS0169  // Member never used
